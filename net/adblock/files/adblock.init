#!/bin/sh /etc/rc.common
# Copyright (c) 2015-2024 Dirk Brenken (dev@brenken.org)
# This is free software, licensed under the GNU General Public License v3.

# (s)hellcheck exceptions
# shellcheck disable=all

START=30
USE_PROCD=1

extra_command "suspend" "Suspend adblock processing"
extra_command "resume" "Resume adblock processing"
extra_command "query" "<domain> Query active blocklists and backups for a specific domain"
extra_command "report" "[[<cli>|<mail>|<gen>|<json>] [<top_count>] [<res_count>] [<search>]] Print DNS statistics with an optional search parameter"
extra_command "list" "List available sources"
extra_command "timer" "[<add> <tasks> <hour> [<minute>] [<weekday>]]|[<remove> <line no.>] List/Edit cron update intervals"

adb_init="/etc/init.d/adblock"
adb_script="/usr/bin/adblock.sh"
adb_pidfile="/var/run/adblock.pid"

[ "${action}" = "boot" ] && "${adb_init}" running && exit 0
[ -s "${adb_pidfile}" ] && { [ "${action}" = "start" ] || [ "${action}" = "stop" ] || [ "${action}" = "restart" ] || [ "${action}" = "reload" ] || [ "${action}" = "report" ] || [ "${action}" = "suspend" ] || [ "${action}" = "resume" ] || [ "${action}" = "query" ] || { [ "${action}" = "list" ] && [ -n "${1}" ]; }; } && exit 1

boot() {
	: >"${adb_pidfile}"
	rc_procd start_service
}

start_service() {
	if "${adb_init}" enabled; then
		if [ "${action}" = "boot" ]; then
			[ -n "$(uci_get adblock global adb_trigger)" ] && return 0
		fi
		procd_open_instance "adblock"
		procd_set_param command "${adb_script}" "${@}"
		procd_set_param pidfile "${adb_pidfile}"
		procd_set_param nice "$(uci_get adblock global adb_nice "0")"
		procd_set_param stdout 0
		procd_set_param stderr 1
		procd_close_instance
	fi
}

reload_service() {
	rc_procd start_service reload
}

stop_service() {
	rc_procd "${adb_script}" stop
}

restart() {
	rc_procd "${adb_script}" stop
	rc_procd start_service restart
}

suspend() {
	rc_procd start_service suspend
}

resume() {
	rc_procd start_service resume
}

query() {
	rc_procd "${adb_script}" query "${1}"
}

report() {
	rc_procd "${adb_script}" report "${1:-"cli"}" "${2}" "${3}" "${4}"
}

list() {
	local src_archive src_file src_enabled enabled name utc_list size focus descurl

	src_archive="$(uci_get adblock global adb_srcarc "/etc/adblock/adblock.sources.gz")"
	src_file="$(uci_get adblock global adb_srcfile "/tmp/adb_sources.json")"
	src_enabled="$(uci -q show adblock.global.adb_sources)"
	[ -r "${src_archive}" ] && zcat "${src_archive}" >"${src_file}" || printf "%s\n" "::: adblock source archive '${src_archive}' not found"

	if [ -r "${src_file}" ]; then
		src_enabled="${src_enabled#*=}"
		src_enabled="${src_enabled//\'}"
		printf "%s\n" "::: Available adblock sources"
		printf "%s\n" ":::"
		printf "%-25s%-10s%-7s%-21s%s\n" "    Name" "Enabled" "Size" "Focus" "Info URL"
		printf "%s\n" "    -------------------------------------------------------------------"
		json_load_file "${src_file}"
		json_get_keys keylist
		for key in ${keylist}; do
			json_select "${key}"
			json_get_var size "size"
			json_get_var focus "focus"
			json_get_var descurl "descurl"
			json_get_var url "url"
			json_get_var rule "rule"
			if [ -n "${url}" ] && [ -n "${rule}" ]; then
				if printf "%s" "${src_enabled}" | grep -q "${key}"; then
					enabled="x"
				else
					enabled=" "
				fi
				src_enabled="${src_enabled/${key}}"
				printf "  + %-21s%-10s%-7s%-21s%s\n" "${key:0:20}" "${enabled}" "${size:0:3}" "${focus:0:20}" "${descurl:0:50}"
			else
				src_enabled="${src_enabled} ${key}"
			fi
			json_select ..
		done
		utc_list="$(uci_get adblock global adb_utc_sources "-")"
		hag_list="$(uci_get adblock global adb_hag_sources "-")"
		stb_list="$(uci_get adblock global adb_stb_sources "-")"
		printf "%s\n" "    ---------------------------------------------------------------------------"
		printf "  * %s\n" "Configured utcapitole categories: ${utc_list// /, }"
		printf "  * %s\n" "Configured hagezi variants: ${hag_list// /, }"
		printf "  * %s\n" "Configured stevenblack variants: ${stb_list// /, }"

		if [ -n "${src_enabled// }" ]; then
			printf "%s\n" "    ---------------------------------------------------------------------------"
			printf "%s\n" "    Sources with invalid configuration"
			printf "%s\n" "    ---------------------------------------------------------------------------"
			for key in ${src_enabled}; do
				printf "  - %s\n" "${key:0:20}"
			done
		fi
	else
		printf "%s\n" "::: adblock source file '${src_file}' not found"
	fi
}

status() {
	status_service
}

status_service() {
	local key keylist value values rtfile

	rtfile="$(uci_get adblock global adb_rtfile "/tmp/adb_runtime.json")"
	json_init
	json_load_file "${rtfile}" >/dev/null 2>&1
	json_get_keys keylist
	if [ -n "${keylist}" ]; then
		printf "%s\n" "::: adblock runtime information"
		for key in ${keylist}; do
			json_get_var value "${key}" >/dev/null 2>&1
			if [ "${key}" = "active_sources" ]; then
				json_get_values values "${key}" >/dev/null 2>&1
				value="${values// /, }"
			fi
			printf "  + %-15s : %s\n" "${key}" "${value:-"-"}"
		done
	else
		printf "%s\n" "::: no adblock runtime information available"
	fi
}

timer() {
	local cron_file cron_content cron_lineno action="${1:-"list"}" cron_tasks="${2}" hour="${3}" minute="${4:-0}" weekday="${5:-"*"}"

	cron_file="/etc/crontabs/root"

	if [ -s "${cron_file}" ] && [ "${action}" = "list" ]; then
		awk '{print NR ">  " $0}' "${cron_file}"
	elif [ -x "/etc/init.d/cron" ] && [ "${action}" = "add" ]; then
		hour="${hour//[[:alpha:]]/}"
		minute="${minute//[[:alpha:]]/}"
		if [ -n "${cron_tasks}" ] && [ -n "${hour}" ] && [ -n "${minute}" ] && [ -n "${weekday}" ] &&
			[ "${hour}" -ge 0 ] && [ "${hour}" -le 23 ] &&
			[ "${minute}" -ge 0 ] && [ "${minute}" -le 59 ]; then
			printf "%02d %02d %s\n" "${minute}" "${hour}" "* * ${weekday} ${adb_init} ${cron_tasks}" >>"${cron_file}"
			/etc/init.d/cron restart
		fi
	elif [ -x "/etc/init.d/cron" ] && [ -s "${cron_file}" ] && [ "${action}" = "remove" ]; then
		cron_tasks="${cron_tasks//[[:alpha:]]/}"
		cron_lineno="$(awk 'END{print NR}' "${cron_file}")"
		cron_content="$(awk '{print $0}' "${cron_file}")"
		if [ "${cron_tasks:-"0"}" -le "${cron_lineno:-"1"}" ] && [ -n "${cron_content}" ]; then
			printf "%s\n" "${cron_content}" | awk "NR!~/^${cron_tasks}$/" >"${cron_file}"
			/etc/init.d/cron restart
		fi
	fi
}

service_triggers() {
	local iface delay

	iface="$(uci_get adblock global adb_trigger)"
	delay="$(uci_get adblock global adb_triggerdelay "5")"

	PROCD_RELOAD_DELAY="$((delay * 1000))"
	[ -n "${iface}" ] && procd_add_interface_trigger "interface.*.up" "${iface}" "${adb_init}" start

	PROCD_RELOAD_DELAY="$((2 * 1000))"
	procd_add_reload_trigger "adblock"
}
