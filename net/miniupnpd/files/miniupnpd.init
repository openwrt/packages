#!/bin/sh /etc/rc.common
# Copyright (C) 2006-2014 OpenWrt.org

START=94
STOP=15
USE_PROCD=1
PROG=/usr/sbin/miniupnpd
[ -x "$(command -v nft)" ] && FW="fw4" || FW="fw3"

start_service() {
	upnpd_uci_migration
	config_load "upnpd"
	local enabled config_file log_output conf
	config_get enabled settings enabled 0
	config_get config_file settings config_file
	config_get log_output settings log_output
	[ "$enabled" != "1" ] && log "Service disabled, UCI enabled is not set" && exit 1
	if [ -n "$config_file" ]; then
		conf="$config_file"
	else
		local tmpconf="/var/etc/miniupnpd.conf"
		conf="$tmpconf"
		mkdir -p /var/etc
		upnpd_generate_config "$tmpconf"
	fi
	if [ "$FW" = "fw4" ]; then
		nft -s -t -n list chain inet fw4 upnp_forward >/dev/null 2>&1 || fw4 reload
	else
		iptables -L MINIUPNPD >/dev/null 2>&1 || fw3 reload
	fi

	procd_open_instance
	procd_set_param file "$conf" "/etc/config/firewall"
	procd_set_param command "$PROG"
	procd_append_param command -f "$conf"
	[ "$log_output" = "info" ] && procd_append_param command -v
	[ "$log_output" = "debug" ] && procd_append_param command -d
	procd_close_instance
}

stop_service() {
	if [ "$FW" = "fw3" ]; then
		iptables -t nat -F MINIUPNPD 2>/dev/null
		iptables -t nat -F MINIUPNPD-POSTROUTING 2>/dev/null
		iptables -t filter -F MINIUPNPD 2>/dev/null
		[ -x /usr/sbin/ip6tables ] && ip6tables -t filter -F MINIUPNPD 2>/dev/null
	else
		nft flush chain inet fw4 upnp_forward 2>/dev/null
		nft flush chain inet fw4 upnp_prerouting 2>/dev/null
		nft flush chain inet fw4 upnp_postrouting 2>/dev/null
	fi
}

service_triggers() {
	procd_add_reload_trigger "upnpd"
}

upnpd_generate_config() {
	# Daemon
	local enabled_protocols allow_cgnat_use stun_host allow_third_party_mapping ipv6_disable system_uptime lease_file
	config_get enabled_protocols settings enabled_protocols all
	config_get allow_cgnat_use settings allow_cgnat_use 0
	config_get stun_host settings stun_host stun.nextcloud.com
	config_get allow_third_party_mapping settings allow_third_party_mapping 0
	config_get ipv6_disable settings ipv6_disable 0
	config_get system_uptime settings system_uptime 1
	config_get lease_file settings lease_file /var/run/miniupnpd.leases

	# UPnP IGD
	local upnp_igd_compat upnp_igd_download upnp_igd_upload upnp_igd_friendly_name model_number serial_number presentation_url uuid upnp_igd_http_port notify_interval
	config_get upnp_igd_compat settings upnp_igd_compat igdv1
	config_get upnp_igd_download settings upnp_igd_download
	config_get upnp_igd_upload settings upnp_igd_upload
	config_get upnp_igd_friendly_name settings upnp_igd_friendly_name
	config_get model_number settings model_number
	config_get serial_number settings serial_number
	config_get presentation_url settings presentation_url
	config_get uuid settings uuid
	config_get upnp_igd_http_port settings upnp_igd_http_port 5000
	config_get notify_interval settings notify_interval

	# External network interface
	local external_iface external_iface6 external_zone external_ip
	config_get external_iface settings external_iface
	config_get external_iface6 settings external_iface6
	config_get external_zone settings external_zone
	config_get external_ip settings external_ip

	local ifname ifname6
	. /lib/functions/network.sh
	if [ -n "$external_iface" ]; then
		network_get_device ifname "$external_iface"
	elif [ -n "$external_zone" ]; then
		ifname=$($FW -q zone "$external_zone" 2>/dev/null | head -1)
	else
		network_find_wan external_iface && network_get_device ifname "$external_iface"
	fi
	if [ -n "$external_iface6" ]; then
		network_get_device ifname6 "$external_iface6"
	elif [ -n "$external_zone" ]; then
		ifname6=$($FW -q zone "$external_zone" 2>/dev/null | head -1)
	else
		network_find_wan6 external_iface6 && network_get_device ifname6 "$external_iface6"
	fi

	[ "$ifname" = "" ] && log "No external network interface found, not starting" daemon.err && exit 1
	! uci -q get upnpd.@internal_network[0].interface >/dev/null && log "No internal networks configured, not starting" daemon.err && exit 1
	# Only perform an STUN CGNAT test when necessary with a private/CGNAT external IPv4
	local extipv4 extipv4private
	network_get_ipaddr extipv4 "$ifname"
	case "$extipv4" in 10.* | 172.1[6-9].* | 172.2[0-9].* | 172.3[0-1].* | 192.168.* | 100.6[4-9].* | 100.[7-9][0-9].* | 100.1[0-1][0-9].* | 100.12[0-7].*)
		extipv4private=1
		;;
	esac

	{
		echo "# Daemon"
		[ "$enabled_protocols" = "all" ] && echo "enable_upnp=yes" && echo "enable_pcp_pmp=yes"
		[ "$enabled_protocols" = "upnp-igd" ] && echo "enable_upnp=yes" && echo "enable_pcp_pmp=no"
		[ "$enabled_protocols" = "pcp+nat-pmp" ] && echo "enable_upnp=no" && echo "enable_pcp_pmp=yes"
		if [ "$extipv4private" = "1" ] && [ "$allow_cgnat_use" != "0" ] && [ "$external_ip" = "" ]; then
			[ "$allow_cgnat_use" = "1" ] && echo "ext_perform_stun=yes"
			[ "$allow_cgnat_use" = "allow-filtered" ] && echo "ext_perform_stun=allow-filtered"
			# Commented out as allow-filtered detects a public IPv4, required by some (e.g. PCP/NAT-PMP) clients
			# [ "$allow_cgnat_use" = "allow-private-ext-ipv4" ] && external_ip=203.1.2.3
			echo "ext_stun_host=${stun_host%%:*}"
			[ "${stun_host%%:*}" != "${stun_host##*:}" ] && echo "ext_stun_port=${stun_host##*:}"
		fi
		[ "$allow_third_party_mapping" = "0" ] && echo "secure_mode=yes" && echo "pcp_allow_thirdparty=no"
		[ "$allow_third_party_mapping" = "1" ] && echo "secure_mode=no" && echo "pcp_allow_thirdparty=yes"
		[ "$allow_third_party_mapping" = "upnp-igd" ] && echo "secure_mode=no" && echo "pcp_allow_thirdparty=no"
		[ "$allow_third_party_mapping" = "pcp" ] && echo "secure_mode=yes" && echo "pcp_allow_thirdparty=yes"
		[ "$ipv6_disable" = "0" ] && echo "ipv6_disable=no" || echo "ipv6_disable=yes"
		[ "$system_uptime" = "0" ] && echo "system_uptime=no" || echo "system_uptime=yes"
		touch "$lease_file" && echo "lease_file=$lease_file"
		[ "$ipv6_disable" = "0" ] && touch "${lease_file}-ipv6" && echo "lease_file6=${lease_file}-ipv6"

		if [ "$enabled_protocols" = "upnp-igd" ] || [ "$enabled_protocols" = "all" ]; then
			echo "# UPnP IGD"
			[ "$upnp_igd_compat" = "igdv1" ] && echo "force_igd_desc_v1=yes" || echo "force_igd_desc_v1=no"
			[ -n "$upnp_igd_download" ] && echo "bitrate_down=$((upnp_igd_download * 1000))"
			[ -n "$upnp_igd_upload" ] && echo "bitrate_up=$((upnp_igd_upload * 1000))"
			[ -n "$upnp_igd_friendly_name" ] && echo "friendly_name=$upnp_igd_friendly_name"
			echo "model_number=$model_number"
			echo "serial=$serial_number"
			[ -n "$presentation_url" ] && echo "presentation_url=$presentation_url"
			[ -z "$uuid" ] && {
				log "Generate UPnP IGD UUID"
				uuid="$(cat /proc/sys/kernel/random/uuid)"
				uci set upnpd.settings.uuid="$uuid"
				uci commit upnpd
			}
			[ "$uuid" != "nocli" ] && echo "uuid=$uuid" || log "Deprecated. Set uuid to 00000000-0000-0000-0000-000000000000 instead"
			echo "http_port=$upnp_igd_http_port"
			[ -n "$notify_interval" ] && echo "notify_interval=$notify_interval"
		fi

		if [ "$FW" = "fw4" ]; then
			echo "# Firewall backend"
			echo "upnp_table_name=fw4"
			echo "upnp_nat_table_name=fw4"
			echo "upnp_forward_chain=upnp_forward"
			echo "upnp_nat_chain=upnp_prerouting"
			echo "upnp_nat_postrouting_chain=upnp_postrouting"
		fi

		echo "# External network interface"
		echo "ext_ifname=$ifname"
		echo "ext_ifname6=$ifname6"
		[ -n "$external_ip" ] && echo "ext_ip=$external_ip"

		# Enabled internal networks / access control
		config_foreach upnpd_add_int_network_preset internal_network precustom
		echo "# Custom ACL"
		config_foreach upnpd_add_custom_acl_entry acl_entry
		config_foreach upnpd_add_int_network_preset internal_network postcustom
		echo "deny 1-65535 0.0.0.0/0 1-65535 # Reject ACL by default"

	} >"$1"
}

log() {
	logger -s -p "${2:-daemon.notice}" -t "upnpd" "$1" || echo "upnpd: $1" >&2
}

is_port_or_range() {
	[ "$1" = "0" ] && return 1
	[ "$1" -ge "1" ] 2>/dev/null && [ "$1" -le "65535" ] 2>/dev/null && return 0
	[ "$2" = "port0inrange" ] && local minport=0 || local minport=1
	[ "${1%%-*}" -ge "$minport" ] 2>/dev/null && [ "${1%%-*}" -le "65535" ] 2>/dev/null &&
		[ "${1##*-}" -ge "$minport" ] 2>/dev/null && [ "${1##*-}" -le "65535" ] 2>/dev/null &&
		[ "${1##*-}" -ge "${1%%-*}" ] 2>/dev/null && return 0 || return 1
}

upnpd_add_int_network_preset() {
	local cfg="$1"
	local interface acl_preset acl_accept_ports acl_reject_ports acl_custom_first
	config_get interface "$cfg" interface
	config_get acl_preset "$cfg" acl_preset accept-high-ports
	config_get acl_accept_ports "$cfg" acl_accept_ports
	config_get acl_reject_ports "$cfg" acl_reject_ports "21 23 135 137-139 445 3389"
	config_get acl_custom_first "$cfg" acl_custom_first
	local device subnet rejectport acceptpresetports acceptport
	network_get_device device "$interface"
	network_get_subnet subnet "$interface"
	if [ "$2" = "precustom" ]; then
		echo "# Enable internal network $interface ($device) with preset $acl_preset${acl_custom_first:+ and check custom ACL first}"
		echo "listening_ip=$device"
	fi
	[ "$subnet" = "" ] && log "Cannot get IPv4 subnet for network $interface, network preset ignored" daemon.warn && return 0
	if [ "$2" = "precustom" ]; then
		for rejectport in $acl_reject_ports; do
			is_port_or_range "$rejectport" && echo "deny $rejectport $subnet $rejectport # Reject port $rejectport on $interface" ||
				log "Invalid port or port range ($rejectport) in acl_reject_ports ignored" daemon.warn
		done
	fi
	if { [ "$2" = "postcustom" ] && [ "$acl_custom_first" = "1" ]; } ||
		{ [ "$2" = "precustom" ] && [ "$acl_custom_first" != "1" ]; }; then
		if [ "$acl_preset" = "accept-high-ports" ]; then
			acceptpresetports="1024-65535"
		elif [ "$acl_preset" = "accept-high-ports+web" ]; then
			acceptpresetports="1024-65535 80 443"
		elif [ "$acl_preset" = "accept-high-ports+web+dns" ]; then
			acceptpresetports="1024-65535 80 443 53 853"
		elif [ "$acl_preset" = "accept-all-ports" ]; then
			acceptpresetports="1-65535"
		elif [ "$acl_preset" != "none" ] && [ "$acl_preset" != "accept-listed-ports" ]; then
			log "Invalid preset ($acl_preset) ignored" daemon.warn
		fi
		for acceptport in $acceptpresetports $acl_accept_ports; do
			is_port_or_range "$acceptport" && echo "allow $acceptport $subnet $acceptport # Accept port $acceptport on $interface" ||
				log "Invalid port or port range ($acceptport) in acl_accept_ports ignored" daemon.warn
		done
	fi
	if [ "$2" = "precustom" ] && [ "$acl_custom_first" != "1" ] && [ "$acl_preset" != "none" ]; then
		echo "deny 1-65535 $subnet 1-65535 # Reject ACL by default on $interface"
	fi
}

upnpd_add_custom_acl_entry() {
	local cfg="$1"
	local comment int_addr int_port ext_port desc_filter action
	config_get comment "$cfg" comment "unspecified" # comment
	config_get int_addr "$cfg" int_addr "0.0.0.0/0" # IPv4 or network and subnet mask (internal)
	config_get int_port "$cfg" int_port "1-65535"   # internal port/range: x or x-y
	config_get ext_port "$cfg" ext_port "1-65535"   # external port/range: x or x-y
	config_get desc_filter "$cfg" desc_filter       # description regex filter (must be built in)
	config_get action "$cfg" action                 # accept/reject/ignore
	! is_port_or_range "$int_port" port0inrange &&
		log "Custom ACL: Entry with invalid port or port range ($int_port) in int_port ignored" daemon.warn && int_port=1-65535
	! is_port_or_range "$ext_port" port0inrange &&
		log "Custom ACL: Entry with invalid port or port range ($ext_port) in ext_port ignored" daemon.warn && ext_port=1-65535
	[ "$desc_filter" != "" ] && desc_filter=" \"$desc_filter\""
	[ "$action" = "accept" ] && action=allow
	[ "$action" = "reject" ] && action=deny
	[ "$action" = "ignore" ] && return 0
	[ "$action" = "" ] && log "Custom ACL: Entry with no action ignored" daemon.warn && return 0
	echo "$action $ext_port $int_addr $int_port${desc_filter} # $comment"
}

upnpd_uci_migration() {
	{ uci -q get upnpd.settings >/dev/null || ! uci -q get upnpd.config >/dev/null; } && return 0
	log "Check UCI options in /etc/config/upnpd to be migrated to v2.0 ..."

	# Set missing enabled option to fix previously different defaults in LuCI/config (0) and init UCI (1)
	if ! uci -q get upnpd.config.enabled >/dev/null; then
		uci -q set upnpd.config.enabled="1"
	fi

	# Migrate boolean options to only use 0/1 for LuCI support
	for option in enabled ipv6_disable system_uptime; do
		if uci -q get upnpd.config.$option >/dev/null; then
			uci get upnpd.config.$option | grep -q -E -x "0|off|false|no|disabled" && uci set upnpd.config.$option="0"
			uci get upnpd.config.$option | grep -q -E -x "1|on|true|yes|enabled" && uci set upnpd.config.$option="1"
		fi
	done

	# Migrate enable_upnp/enable_natpmp -> enabled_protocols: Combined option
	if uci -q get upnpd.config.enable_upnp >/dev/null || uci -q get upnpd.config.enable_natpmp >/dev/null; then
		log "enable_upnp/enable_natpmp -> enabled_protocols: Combined option"
		if ! uci -q get upnpd.config.enable_upnp | grep -q -E -x "0|off|false|no|disabled"; then
			uci -q get upnpd.config.enable_natpmp | grep -q -E -x "0|off|false|no|disabled" &&
				uci set upnpd.config.enabled_protocols="upnp-igd" ||
				uci set upnpd.config.enabled_protocols="all"
		elif ! uci -q get upnpd.config.enable_natpmp | grep -q -E -x "0|off|false|no|disabled"; then
			uci set upnpd.config.enabled_protocols="pcp+nat-pmp"
		else
			uci set upnpd.config.enabled_protocols="all"
			uci set upnpd.config.enabled="0"
		fi
		uci -q delete upnpd.config.enable_upnp
		uci -q delete upnpd.config.enable_natpmp
	fi

	# Rename use_stun -> allow_cgnat_use
	if uci -q get upnpd.config.use_stun >/dev/null; then
		log "use_stun -> allow_cgnat_use"
		uci rename upnpd.config.use_stun="allow_cgnat_use"
	fi

	# Migrate force_forwarding=1 -> allow_cgnat_use=allow-filtered:
	# Option from X-Wrt (since 2021) gets migrated to new similar daemon option for cross-project upgrades
	if uci -q get upnpd.config.force_forwarding >/dev/null; then
		log "force_forwarding=1 -> allow_cgnat_use=allow-filtered: Migrate to new daemon option"
		uci get upnpd.config.force_forwarding | grep -q -E -x "1|on|true|yes|enabled" &&
			uci set upnpd.config.allow_cgnat_use="allow-filtered"
		uci delete upnpd.config.force_forwarding
	fi

	# Remove known incompatible (not CGNAT filtering test capable) STUN servers and include stun_port in stun_host
	if uci -q get upnpd.config.stun_host | grep -q -E "stun[0-9]?.l.google.com|stun.cloudflare.com"; then
		log "stun_host: Incompatible STUN server ($(uci -q get upnpd.config.stun_host)) found, remove to set default"
		uci delete upnpd.config.stun_host
		uci -q delete upnpd.config.stun_port
	elif uci -q get upnpd.config.stun_port >/dev/null; then
		uci -q get upnpd.config.stun_host >/dev/null && [ "$(uci -q get upnpd.config.stun_port)" != "3478" ] &&
			log "stun_port: Include stun_port in stun_host, and remove option" &&
			uci set upnpd.config.stun_host="$(uci -q get upnpd.config.stun_host | cut -d ":" -f 1):$(uci -q get upnpd.config.stun_port)"
		uci delete upnpd.config.stun_port
	fi

	# Migrate secure_mode=1/0 -> allow_third_party_mapping=0/upnp-igd: Invert/extend to PCP
	if uci -q get upnpd.config.secure_mode >/dev/null; then
		log "secure_mode=1/0 -> allow_third_party_mapping=0/upnp-igd: Invert/extend to PCP"
		uci get upnpd.config.secure_mode | grep -q -E -x "0|off|false|no|disabled" &&
			uci set upnpd.config.allow_third_party_mapping="upnp-igd" ||
			uci set upnpd.config.allow_third_party_mapping="0"
		uci delete upnpd.config.secure_mode
	fi

	# Migrate log_output=1/0 -> log_output=debug/default: Now info also allowed
	if uci -q get upnpd.config.log_output >/dev/null; then
		uci get upnpd.config.log_output | grep -q -E -x "1|on|true|yes|enabled" &&
			log "log_output=1 -> log_output=debug: Now info also allowed" &&
			uci set upnpd.config.log_output="debug"
		uci get upnpd.config.log_output | grep -q -E -x "0|off|false|no|disabled" &&
			uci set upnpd.config.log_output="default"
	fi

	# Rename upnp_lease_file -> lease_file: To original daemon name, and remove if UCI default
	if uci -q get upnpd.config.upnp_lease_file >/dev/null; then
		if [ "$(uci -q get upnpd.config.upnp_lease_file)" = "/var/run/miniupnpd.leases" ]; then
			log "upnp_lease_file -> lease_file: Remove option as UCI default is set"
			uci delete upnpd.config.upnp_lease_file
		else
			log "upnp_lease_file -> lease_file"
			uci rename upnpd.config.upnp_lease_file="lease_file"
		fi
	fi

	# Migrate igdv1=1/0 -> upnp_igd_compat=igdv1/igdv2: Extensible/clearer
	if uci -q get upnpd.config.igdv1 >/dev/null; then
		log "igdv1=1/0 -> upnp_igd_compat=igdv1/igdv2"
		uci get upnpd.config.igdv1 | grep -q -E -x "1|on|true|yes|enabled" &&
			uci set upnpd.config.upnp_igd_compat="igdv1" ||
			uci set upnpd.config.upnp_igd_compat="igdv2"
		uci delete upnpd.config.igdv1
	fi

	# Migrate download/upload -> upnp_igd_download/upnp_igd_upload: Convert to kbit/s
	if uci -q get upnpd.config.download >/dev/null; then
		download="$(uci -q get upnpd.config.download)"
		if [ "$download" != "1024" ] && [ "$download" -ge "1" ] 2>/dev/null; then
			log "download -> upnp_igd_download: Convert to kbit/s"
			upnp_igd_download="$((download * 8 * 1000 / 1024))"
			uci set upnpd.config.upnp_igd_download="$upnp_igd_download"
		fi
		uci delete upnpd.config.download
	fi
	if uci -q get upnpd.config.upload >/dev/null; then
		upload="$(uci -q get upnpd.config.upload)"
		if [ "$upload" != "512" ] && [ "$upload" -ge "1" ] 2>/dev/null; then
			log "upload -> upnp_igd_upload: Convert to kbit/s"
			upnp_igd_upload="$((upload * 8 * 1000 / 1024))"
			uci set upnpd.config.upnp_igd_upload="$upnp_igd_upload"
		fi
		uci delete upnpd.config.upload
	fi

	# Rename port -> upnp_igd_http_port: Remove if UCI default
	if uci -q get upnpd.config.port >/dev/null; then
		if [ "$(uci -q get upnpd.config.port)" = "5000" ]; then
			log "port -> upnp_igd_http_port: Remove option as UCI default is set"
			uci delete upnpd.config.port
		else
			log "port -> upnp_igd_http_port"
			uci rename upnpd.config.port="upnp_igd_http_port"
		fi
	fi

	# Migrate notify_interval <=900s: Remove to set minimum of 900 (default)
	if [ "$(uci -q get upnpd.config.notify_interval)" -le "900" ] 2>/dev/null; then
		log "notify_interval <=900s: Remove to set minimum of 900 (default)"
		uci delete upnpd.config.notify_interval
	fi

	# Migrate custom ACL to new section, note that an empty ACL is now rejected
	# a) Empty/unmodified ACL: Enable appropriate preset, add/update template entries
	# b) Modified ACL:
	#    - Add missing entry action to avoid adding inverted actions when changing via LuCI
	#    - Update entry action allow/deny -> accept/reject
	#    - Update entry port options to only use the LuCI (and daemon) supported hyphen (-) as port range separator
	#    - Not using an preset, add template entries
	! uci -q get upnpd.@acl_entry[0] >/dev/null && if ! uci -q get upnpd.@perm_rule[0] >/dev/null; then
		log "Empty ACL: Enable preset, add template entries, empty ACL is now rejected"
		acl_preset=accept-all-ports
		addtemplateentries=1
	elif ! uci -q get upnpd.@perm_rule[2] >/dev/null &&
		[ "$(uci -q get upnpd.@perm_rule[0].int_addr)" = "0.0.0.0/0" ] &&
		[ "$(uci -q get upnpd.@perm_rule[0].int_ports)" = "1024-65535" ] &&
		[ "$(uci -q get upnpd.@perm_rule[0].ext_ports)" = "1024-65535" ] &&
		[ "$(uci -q get upnpd.@perm_rule[0].action)" = "allow" ] &&
		[ "$(uci -q get upnpd.@perm_rule[1].int_addr)" = "0.0.0.0/0" ] &&
		[ "$(uci -q get upnpd.@perm_rule[1].int_ports)" = "0-65535" ] &&
		[ "$(uci -q get upnpd.@perm_rule[1].ext_ports)" = "0-65535" ] &&
		[ "$(uci -q get upnpd.@perm_rule[1].action)" = "deny" ]; then
		log "Unmodified ACL: Enable preset, update template entries, empty ACL is now rejected"
		acl_preset=accept-high-ports
		addtemplateentries=1
		uci delete upnpd.@perm_rule[-1]
		uci delete upnpd.@perm_rule[-1]
	else
		log "Modified ACL: Update action allow/deny -> accept/reject, empty ACL is now rejected"
		acl_preset=none
		addtemplateentries=1
		entrynr=0
		while uci -q get upnpd.@perm_rule[$entrynr] >/dev/null; do
			comment="$(uci -q get upnpd.@perm_rule[$entrynr].comment)"
			int_addr="$(uci -q get upnpd.@perm_rule[$entrynr].int_addr)"
			int_port="$(uci -q get upnpd.@perm_rule[$entrynr].int_ports)"
			ext_port="$(uci -q get upnpd.@perm_rule[$entrynr].ext_ports)"
			action="$(uci -q get upnpd.@perm_rule[$entrynr].action)"
			echo "$int_port" | grep -q ":" &&
				log "Modified ACL: Update entry int_port to only use a hyphen (-) as port range separator" &&
				int_port="$(echo "$int_port" | tr ":" "-")"
			echo "$ext_port" | grep -q ":" &&
				log "Modified ACL: Update entry ext_port to only use a hyphen (-) as port range separator" &&
				ext_port="$(echo "$ext_port" | tr ":" "-")"
			[ "$action" = "" ] && log "Modified ACL: Add missing entry action" && action=reject
			[ "$action" = "allow" ] && action=accept
			[ "$action" = "deny" ] && action=reject
			uci batch >/dev/null <<-EOF
				add upnpd acl_entry
				set upnpd.@acl_entry[-1].comment="${comment:-unspecified}"
				set upnpd.@acl_entry[-1].int_addr="${int_addr:-0.0.0.0/0}"
				set upnpd.@acl_entry[-1].int_port="$int_port"
				set upnpd.@acl_entry[-1].ext_port="$ext_port"
				set upnpd.@acl_entry[-1].action="$action"
			EOF
			entrynr=$((entrynr + 1))
		done
		[ "$int_addr" = "0.0.0.0/0" ] && [ "$int_port" = "0-65535" ] &&
			[ "$ext_port" = "0-65535" ] && [ "$action" = "reject" ] &&
			uci delete upnpd.@acl_entry[-1]
		while uci -q delete upnpd.@perm_rule[-1]; do :; done
	fi
	if [ "$addtemplateentries" = "1" ]; then
		uci batch >/dev/null <<-EOF
			add upnpd acl_entry
			add upnpd acl_entry
			set upnpd.@acl_entry[-2].comment="High ports"
			set upnpd.@acl_entry[-2].int_addr="0.0.0.0/0"
			set upnpd.@acl_entry[-2].int_port="1024-65535"
			set upnpd.@acl_entry[-2].ext_port="1024-65535"
			set upnpd.@acl_entry[-2].action="ignore"
			set upnpd.@acl_entry[-1].comment="Low/system ports"
			set upnpd.@acl_entry[-1].int_addr="0.0.0.0/0"
			set upnpd.@acl_entry[-1].int_port="1-1023"
			set upnpd.@acl_entry[-1].ext_port="1-1023"
			set upnpd.@acl_entry[-1].action="ignore"
		EOF
		uci -q get upnpd.@acl_entry[-3] >/dev/null &&
			uci reorder upnpd.@acl_entry[-2]=0 && uci reorder upnpd.@acl_entry[-1]=1
	fi

	# Migrate internal_iface option to new internal_network section
	if ! uci -q get upnpd.@internal_network[0] >/dev/null; then
		ifnr=0
		for interface in $(uci -q get upnpd.config.internal_iface || echo lan); do
			log "Create new internal_network section for $interface"
			uci add upnpd internal_network >/dev/null
			uci set upnpd.@internal_network[$ifnr].interface="$interface"
			[ "$acl_preset" != "" ] && uci set upnpd.@internal_network[$ifnr].acl_preset="$acl_preset"
			ifnr=$((ifnr + 1))
		done
		uci -q delete upnpd.config.internal_iface
	fi

	# Finally rename section config -> settings (v2.0)
	if uci -q get upnpd.config >/dev/null; then
		log "Rename section config -> settings (v2.0)" && uci rename upnpd.config="settings" ||
			log "Error renaming the UCI section" daemon.err
	fi

	uci commit upnpd >/dev/null
}
